/*
 * Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
 * 
 * On Tue May  7 18:00:11 +0530 2024
 * 
 */
#include "bluesim_primitives.h"
#include "testFSM.h"


/* String declarations */
static std::string const __str_literal_5("Counter = %3d, State: ACKNOWLEDGE_1", 35u);
static std::string const __str_literal_7("Counter = %3d, State: ACKNOWLEDGE_2", 35u);
static std::string const __str_literal_9("Counter = %3d, State: ACKNOWLEDGE_4", 35u);
static std::string const __str_literal_15("Counter = %3d, State: NACK", 26u);
static std::string const __str_literal_14("Counter = %3d, State: RECEIVE_DATA", 34u);
static std::string const __str_literal_10("Counter = %3d, State: RESTART", 29u);
static std::string const __str_literal_4("Counter = %3d, State: R_W", 25u);
static std::string const __str_literal_13("Counter = %3d, State: R_W_2", 27u);
static std::string const __str_literal_3("Counter = %3d, State: SEND_DEV_ADDR", 35u);
static std::string const __str_literal_11("Counter = %3d, State: SEND_DEV_ADDR_2", 37u);
static std::string const __str_literal_6("Counter = %3d, State: SEND_REG_ADDR", 35u);
static std::string const __str_literal_2("Counter = %3d, State: START", 27u);
static std::string const __str_literal_12("Counter = %3d, State: STEP2", 27u);
static std::string const __str_literal_16("Counter = %3d, State: STOP", 26u);
static std::string const __str_literal_8("Counter = %3d, State: WRITE_DATA", 32u);
static std::string const __str_literal_1("Done", 4u);


/* Constructor */
MOD_testFSM::MOD_testFSM(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_addrReg(simHdl, "addrReg", this, 32u, 0u, (tUInt8)0u),
    INST_addr_lenReg(simHdl, "addr_lenReg", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_addr_valid_byteReg(simHdl, "addr_valid_byteReg", this, 2u, (tUInt8)0u, (tUInt8)0u),
    INST_bus_errorReg(simHdl, "bus_errorReg", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_counter(simHdl, "counter", this, 32u, 0u, (tUInt8)0u),
    INST_f_in(simHdl, "f_in", this, 8u, 2u, (tUInt8)1u, 0u),
    INST_f_out(simHdl, "f_out", this, 8u, 2u, (tUInt8)1u, 0u),
    INST_i2c_busyReg(simHdl, "i2c_busyReg", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_nack_errorReg(simHdl, "nack_errorReg", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_rd_fifo_emptyReg(simHdl, "rd_fifo_emptyReg", this, 1u, (tUInt8)1u, (tUInt8)0u),
    INST_rd_fifo_fullReg(simHdl, "rd_fifo_fullReg", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_rd_overflowReg(simHdl, "rd_overflowReg", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_read_writeReg(simHdl, "read_writeReg", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_sclReg(simHdl, "sclReg", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_sdaReg(simHdl, "sdaReg", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_slvaddrReg(simHdl, "slvaddrReg", this, 10u, 0u, (tUInt8)0u),
    INST_startReg(simHdl, "startReg", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_state(simHdl, "state", this, 4u, (tUInt8)0u, (tUInt8)0u),
    INST_underflow_errorReg(simHdl, "underflow_errorReg", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_wr_fifo_emptyReg(simHdl, "wr_fifo_emptyReg", this, 1u, (tUInt8)1u, (tUInt8)0u),
    INST_wr_fifo_fullReg(simHdl, "wr_fifo_fullReg", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_wr_overflowReg(simHdl, "wr_overflowReg", this, 1u, (tUInt8)0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  PORT_EN_outClock = false;
  PORT_EN_reset = false;
  PORT_EN_rd_fifo = false;
  PORT_EN_wr_fifo_csr = false;
  PORT_EN_addr_valid_byte_csr = false;
  PORT_EN_addr_csr = false;
  PORT_EN_read_write_csr = false;
  PORT_EN_addr_len_csr = false;
  PORT_EN_slvaddr_csr = false;
  PORT_EN_start_csr = false;
  PORT_outClock_value = false;
  PORT_reset_value = false;
  PORT_wr_fifo_csr_wr_fifo = 0u;
  PORT_addr_valid_byte_csr_addr_valid_byte = 0u;
  PORT_addr_csr_addr = 0u;
  PORT_read_write_csr_read_write = false;
  PORT_addr_len_csr_addr_len = false;
  PORT_slvaddr_csr_slvaddr = 0u;
  PORT_start_csr_start = false;
  symbol_count = 68u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_testFSM::init_symbols_0()
{
  init_symbol(&symbols[0u], "addr_csr_addr", SYM_PORT, &PORT_addr_csr_addr, 32u);
  init_symbol(&symbols[1u], "addr_len_csr_addr_len", SYM_PORT, &PORT_addr_len_csr_addr_len, 1u);
  init_symbol(&symbols[2u], "addr_lenReg", SYM_MODULE, &INST_addr_lenReg);
  init_symbol(&symbols[3u],
	      "addr_valid_byte_csr_addr_valid_byte",
	      SYM_PORT,
	      &PORT_addr_valid_byte_csr_addr_valid_byte,
	      2u);
  init_symbol(&symbols[4u], "addr_valid_byteReg", SYM_MODULE, &INST_addr_valid_byteReg);
  init_symbol(&symbols[5u], "addrReg", SYM_MODULE, &INST_addrReg);
  init_symbol(&symbols[6u], "bus_errorReg", SYM_MODULE, &INST_bus_errorReg);
  init_symbol(&symbols[7u], "counter", SYM_MODULE, &INST_counter);
  init_symbol(&symbols[8u], "EN_addr_csr", SYM_PORT, &PORT_EN_addr_csr, 1u);
  init_symbol(&symbols[9u], "EN_addr_len_csr", SYM_PORT, &PORT_EN_addr_len_csr, 1u);
  init_symbol(&symbols[10u], "EN_addr_valid_byte_csr", SYM_PORT, &PORT_EN_addr_valid_byte_csr, 1u);
  init_symbol(&symbols[11u], "EN_outClock", SYM_PORT, &PORT_EN_outClock, 1u);
  init_symbol(&symbols[12u], "EN_rd_fifo", SYM_PORT, &PORT_EN_rd_fifo, 1u);
  init_symbol(&symbols[13u], "EN_read_write_csr", SYM_PORT, &PORT_EN_read_write_csr, 1u);
  init_symbol(&symbols[14u], "EN_reset", SYM_PORT, &PORT_EN_reset, 1u);
  init_symbol(&symbols[15u], "EN_slvaddr_csr", SYM_PORT, &PORT_EN_slvaddr_csr, 1u);
  init_symbol(&symbols[16u], "EN_start_csr", SYM_PORT, &PORT_EN_start_csr, 1u);
  init_symbol(&symbols[17u], "EN_wr_fifo_csr", SYM_PORT, &PORT_EN_wr_fifo_csr, 1u);
  init_symbol(&symbols[18u], "f_in", SYM_MODULE, &INST_f_in);
  init_symbol(&symbols[19u], "f_out", SYM_MODULE, &INST_f_out);
  init_symbol(&symbols[20u], "i2c_busyReg", SYM_MODULE, &INST_i2c_busyReg);
  init_symbol(&symbols[21u], "nack_errorReg", SYM_MODULE, &INST_nack_errorReg);
  init_symbol(&symbols[22u], "outClock_value", SYM_PORT, &PORT_outClock_value, 1u);
  init_symbol(&symbols[23u], "RL_runCounter", SYM_RULE);
  init_symbol(&symbols[24u], "RL_stateIdle", SYM_RULE);
  init_symbol(&symbols[25u], "RL_stateSTOP", SYM_RULE);
  init_symbol(&symbols[26u], "RL_stateStep1", SYM_RULE);
  init_symbol(&symbols[27u], "RL_stateStep10", SYM_RULE);
  init_symbol(&symbols[28u], "RL_stateStep11", SYM_RULE);
  init_symbol(&symbols[29u], "RL_stateStep12", SYM_RULE);
  init_symbol(&symbols[30u], "RL_stateStep13", SYM_RULE);
  init_symbol(&symbols[31u], "RL_stateStep2", SYM_RULE);
  init_symbol(&symbols[32u], "RL_stateStep3", SYM_RULE);
  init_symbol(&symbols[33u], "RL_stateStep4", SYM_RULE);
  init_symbol(&symbols[34u], "RL_stateStep5", SYM_RULE);
  init_symbol(&symbols[35u], "RL_stateStep6", SYM_RULE);
  init_symbol(&symbols[36u], "RL_stateStep7", SYM_RULE);
  init_symbol(&symbols[37u], "RL_stateStep8", SYM_RULE);
  init_symbol(&symbols[38u], "RL_stateStep9", SYM_RULE);
  init_symbol(&symbols[39u], "rd_fifo_emptyReg", SYM_MODULE, &INST_rd_fifo_emptyReg);
  init_symbol(&symbols[40u], "rd_fifo_fullReg", SYM_MODULE, &INST_rd_fifo_fullReg);
  init_symbol(&symbols[41u], "rd_overflowReg", SYM_MODULE, &INST_rd_overflowReg);
  init_symbol(&symbols[42u],
	      "read_write_csr_read_write",
	      SYM_PORT,
	      &PORT_read_write_csr_read_write,
	      1u);
  init_symbol(&symbols[43u], "read_writeReg", SYM_MODULE, &INST_read_writeReg);
  init_symbol(&symbols[44u], "reset_value", SYM_PORT, &PORT_reset_value, 1u);
  init_symbol(&symbols[45u], "sclReg", SYM_MODULE, &INST_sclReg);
  init_symbol(&symbols[46u], "sdaReg", SYM_MODULE, &INST_sdaReg);
  init_symbol(&symbols[47u], "slvaddr_csr_slvaddr", SYM_PORT, &PORT_slvaddr_csr_slvaddr, 10u);
  init_symbol(&symbols[48u], "slvaddrReg", SYM_MODULE, &INST_slvaddrReg);
  init_symbol(&symbols[49u], "start_csr_start", SYM_PORT, &PORT_start_csr_start, 1u);
  init_symbol(&symbols[50u], "startReg", SYM_MODULE, &INST_startReg);
  init_symbol(&symbols[51u], "state", SYM_MODULE, &INST_state);
  init_symbol(&symbols[52u], "state__h936", SYM_DEF, &DEF_state__h936, 4u);
  init_symbol(&symbols[53u], "underflow_errorReg", SYM_MODULE, &INST_underflow_errorReg);
  init_symbol(&symbols[54u], "WILL_FIRE_addr_csr", SYM_DEF, &DEF_WILL_FIRE_addr_csr, 1u);
  init_symbol(&symbols[55u], "WILL_FIRE_addr_len_csr", SYM_DEF, &DEF_WILL_FIRE_addr_len_csr, 1u);
  init_symbol(&symbols[56u],
	      "WILL_FIRE_addr_valid_byte_csr",
	      SYM_DEF,
	      &DEF_WILL_FIRE_addr_valid_byte_csr,
	      1u);
  init_symbol(&symbols[57u], "WILL_FIRE_outClock", SYM_DEF, &DEF_WILL_FIRE_outClock, 1u);
  init_symbol(&symbols[58u], "WILL_FIRE_rd_fifo", SYM_DEF, &DEF_WILL_FIRE_rd_fifo, 1u);
  init_symbol(&symbols[59u], "WILL_FIRE_read_write_csr", SYM_DEF, &DEF_WILL_FIRE_read_write_csr, 1u);
  init_symbol(&symbols[60u], "WILL_FIRE_reset", SYM_DEF, &DEF_WILL_FIRE_reset, 1u);
  init_symbol(&symbols[61u], "WILL_FIRE_slvaddr_csr", SYM_DEF, &DEF_WILL_FIRE_slvaddr_csr, 1u);
  init_symbol(&symbols[62u], "WILL_FIRE_start_csr", SYM_DEF, &DEF_WILL_FIRE_start_csr, 1u);
  init_symbol(&symbols[63u], "WILL_FIRE_wr_fifo_csr", SYM_DEF, &DEF_WILL_FIRE_wr_fifo_csr, 1u);
  init_symbol(&symbols[64u], "wr_fifo_csr_wr_fifo", SYM_PORT, &PORT_wr_fifo_csr_wr_fifo, 8u);
  init_symbol(&symbols[65u], "wr_fifo_emptyReg", SYM_MODULE, &INST_wr_fifo_emptyReg);
  init_symbol(&symbols[66u], "wr_fifo_fullReg", SYM_MODULE, &INST_wr_fifo_fullReg);
  init_symbol(&symbols[67u], "wr_overflowReg", SYM_MODULE, &INST_wr_overflowReg);
}


/* Rule actions */

void MOD_testFSM::RL_runCounter()
{
  tUInt32 DEF_counter_PLUS_1___d6;
  tUInt8 DEF_NOT_counter_EQ_100_AND_counter_SLT_100___d5;
  tUInt8 DEF_counter_EQ_100___d2;
  DEF_b__h864 = INST_counter.METH_read();
  DEF_counter_EQ_100___d2 = DEF_b__h864 == 100u;
  DEF_NOT_counter_EQ_100_AND_counter_SLT_100___d5 = !DEF_counter_EQ_100___d2 && primSLT8(1u,
											 32u,
											 (tUInt32)(DEF_b__h864),
											 32u,
											 100u);
  DEF_counter_PLUS_1___d6 = DEF_b__h864 + 1u;
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_counter_EQ_100___d2)
      dollar_display(sim_hdl, this, "s", &__str_literal_1);
    if (DEF_counter_EQ_100___d2)
      dollar_finish(sim_hdl, "32", 1u);
  }
  if (DEF_NOT_counter_EQ_100_AND_counter_SLT_100___d5)
    INST_counter.METH_write(DEF_counter_PLUS_1___d6);
}

void MOD_testFSM::RL_stateIdle()
{
  tUInt8 DEF_startReg__h990;
  DEF_b__h864 = INST_counter.METH_read();
  DEF_signed_counter___d9 = DEF_b__h864;
  DEF_startReg__h990 = INST_startReg.METH_read();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,-32", &__str_literal_2, DEF_signed_counter___d9);
  if (DEF_startReg__h990)
    INST_state.METH_write((tUInt8)1u);
  INST_sdaReg.METH_write((tUInt8)1u);
}

void MOD_testFSM::RL_stateStep1()
{
  DEF_b__h864 = INST_counter.METH_read();
  DEF_signed_counter___d9 = DEF_b__h864;
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,-32", &__str_literal_3, DEF_signed_counter___d9);
  INST_state.METH_write((tUInt8)2u);
}

void MOD_testFSM::RL_stateStep2()
{
  DEF_b__h864 = INST_counter.METH_read();
  DEF_signed_counter___d9 = DEF_b__h864;
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,-32", &__str_literal_4, DEF_signed_counter___d9);
  INST_sdaReg.METH_write((tUInt8)0u);
  INST_state.METH_write((tUInt8)3u);
}

void MOD_testFSM::RL_stateStep3()
{
  tUInt8 DEF_NOT_sdaReg_4___d15;
  DEF_b__h864 = INST_counter.METH_read();
  DEF_signed_counter___d9 = DEF_b__h864;
  DEF_sdaReg__h1204 = INST_sdaReg.METH_read();
  DEF_NOT_sdaReg_4___d15 = !DEF_sdaReg__h1204;
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,-32", &__str_literal_5, DEF_signed_counter___d9);
  if (DEF_sdaReg__h1204)
    INST_state.METH_write((tUInt8)4u);
  if (DEF_NOT_sdaReg_4___d15)
    INST_nack_errorReg.METH_write((tUInt8)1u);
}

void MOD_testFSM::RL_stateStep4()
{
  DEF_b__h864 = INST_counter.METH_read();
  DEF_signed_counter___d9 = DEF_b__h864;
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,-32", &__str_literal_6, DEF_signed_counter___d9);
  INST_state.METH_write((tUInt8)5u);
  INST_sdaReg.METH_write((tUInt8)1u);
}

void MOD_testFSM::RL_stateStep5()
{
  tUInt8 DEF_IF_read_writeReg_8_THEN_8_ELSE_6___d19;
  tUInt8 DEF_read_writeReg__h1337;
  DEF_b__h864 = INST_counter.METH_read();
  DEF_signed_counter___d9 = DEF_b__h864;
  DEF_sdaReg__h1204 = INST_sdaReg.METH_read();
  DEF_read_writeReg__h1337 = INST_read_writeReg.METH_read();
  DEF_IF_read_writeReg_8_THEN_8_ELSE_6___d19 = DEF_read_writeReg__h1337 ? (tUInt8)8u : (tUInt8)6u;
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,-32", &__str_literal_7, DEF_signed_counter___d9);
  if (DEF_sdaReg__h1204)
    INST_state.METH_write(DEF_IF_read_writeReg_8_THEN_8_ELSE_6___d19);
}

void MOD_testFSM::RL_stateStep6()
{
  tUInt8 DEF_NOT_wr_fifo_emptyReg_1___d22;
  DEF_b__h864 = INST_counter.METH_read();
  DEF_signed_counter___d9 = DEF_b__h864;
  DEF_wr_fifo_emptyReg__h1408 = INST_wr_fifo_emptyReg.METH_read();
  DEF_NOT_wr_fifo_emptyReg_1___d22 = !DEF_wr_fifo_emptyReg__h1408;
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,-32", &__str_literal_8, DEF_signed_counter___d9);
  if (DEF_NOT_wr_fifo_emptyReg_1___d22)
    INST_state.METH_write((tUInt8)7u);
}

void MOD_testFSM::RL_stateStep7()
{
  DEF_b__h864 = INST_counter.METH_read();
  DEF_signed_counter___d9 = DEF_b__h864;
  DEF_sdaReg__h1204 = INST_sdaReg.METH_read();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,-32", &__str_literal_9, DEF_signed_counter___d9);
  if (DEF_sdaReg__h1204)
    INST_state.METH_write((tUInt8)14u);
}

void MOD_testFSM::RL_stateStep8()
{
  DEF_b__h864 = INST_counter.METH_read();
  DEF_signed_counter___d9 = DEF_b__h864;
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,-32", &__str_literal_10, DEF_signed_counter___d9);
  INST_state.METH_write((tUInt8)9u);
  INST_sdaReg.METH_write((tUInt8)1u);
}

void MOD_testFSM::RL_stateStep9()
{
  DEF_b__h864 = INST_counter.METH_read();
  DEF_signed_counter___d9 = DEF_b__h864;
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,-32", &__str_literal_11, DEF_signed_counter___d9);
  INST_state.METH_write((tUInt8)10u);
}

void MOD_testFSM::RL_stateStep10()
{
  DEF_b__h864 = INST_counter.METH_read();
  DEF_signed_counter___d9 = DEF_b__h864;
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,-32", &__str_literal_12, DEF_signed_counter___d9);
  INST_state.METH_write((tUInt8)11u);
  INST_sdaReg.METH_write((tUInt8)1u);
}

void MOD_testFSM::RL_stateStep11()
{
  DEF_b__h864 = INST_counter.METH_read();
  DEF_signed_counter___d9 = DEF_b__h864;
  DEF_sdaReg__h1204 = INST_sdaReg.METH_read();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,-32", &__str_literal_13, DEF_signed_counter___d9);
  if (DEF_sdaReg__h1204)
    INST_state.METH_write((tUInt8)12u);
}

void MOD_testFSM::RL_stateStep12()
{
  DEF_b__h864 = INST_counter.METH_read();
  DEF_signed_counter___d9 = DEF_b__h864;
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,-32", &__str_literal_14, DEF_signed_counter___d9);
  INST_state.METH_write((tUInt8)13u);
}

void MOD_testFSM::RL_stateStep13()
{
  DEF_b__h864 = INST_counter.METH_read();
  DEF_signed_counter___d9 = DEF_b__h864;
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,-32", &__str_literal_15, DEF_signed_counter___d9);
  INST_sdaReg.METH_write((tUInt8)1u);
  INST_state.METH_write((tUInt8)14u);
}

void MOD_testFSM::RL_stateSTOP()
{
  DEF_b__h864 = INST_counter.METH_read();
  DEF_signed_counter___d9 = DEF_b__h864;
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,-32", &__str_literal_16, DEF_signed_counter___d9);
  INST_state.METH_write((tUInt8)0u);
  INST_sdaReg.METH_write((tUInt8)1u);
}


/* Methods */

void MOD_testFSM::METH_start_csr(tUInt8 ARG_start_csr_start)
{
  PORT_EN_start_csr = (tUInt8)1u;
  DEF_WILL_FIRE_start_csr = (tUInt8)1u;
  PORT_start_csr_start = ARG_start_csr_start;
  INST_startReg.METH_write(ARG_start_csr_start);
}

tUInt8 MOD_testFSM::METH_RDY_start_csr()
{
  tUInt8 PORT_RDY_start_csr;
  tUInt8 DEF_CAN_FIRE_start_csr;
  DEF_CAN_FIRE_start_csr = (tUInt8)1u;
  PORT_RDY_start_csr = DEF_CAN_FIRE_start_csr;
  return PORT_RDY_start_csr;
}

void MOD_testFSM::METH_slvaddr_csr(tUInt32 ARG_slvaddr_csr_slvaddr)
{
  PORT_EN_slvaddr_csr = (tUInt8)1u;
  DEF_WILL_FIRE_slvaddr_csr = (tUInt8)1u;
  PORT_slvaddr_csr_slvaddr = ARG_slvaddr_csr_slvaddr;
  INST_slvaddrReg.METH_write(ARG_slvaddr_csr_slvaddr);
}

tUInt8 MOD_testFSM::METH_RDY_slvaddr_csr()
{
  tUInt8 PORT_RDY_slvaddr_csr;
  tUInt8 DEF_CAN_FIRE_slvaddr_csr;
  DEF_CAN_FIRE_slvaddr_csr = (tUInt8)1u;
  PORT_RDY_slvaddr_csr = DEF_CAN_FIRE_slvaddr_csr;
  return PORT_RDY_slvaddr_csr;
}

void MOD_testFSM::METH_addr_len_csr(tUInt8 ARG_addr_len_csr_addr_len)
{
  PORT_EN_addr_len_csr = (tUInt8)1u;
  DEF_WILL_FIRE_addr_len_csr = (tUInt8)1u;
  PORT_addr_len_csr_addr_len = ARG_addr_len_csr_addr_len;
  INST_addr_lenReg.METH_write(ARG_addr_len_csr_addr_len);
}

tUInt8 MOD_testFSM::METH_RDY_addr_len_csr()
{
  tUInt8 PORT_RDY_addr_len_csr;
  tUInt8 DEF_CAN_FIRE_addr_len_csr;
  DEF_CAN_FIRE_addr_len_csr = (tUInt8)1u;
  PORT_RDY_addr_len_csr = DEF_CAN_FIRE_addr_len_csr;
  return PORT_RDY_addr_len_csr;
}

void MOD_testFSM::METH_read_write_csr(tUInt8 ARG_read_write_csr_read_write)
{
  PORT_EN_read_write_csr = (tUInt8)1u;
  DEF_WILL_FIRE_read_write_csr = (tUInt8)1u;
  PORT_read_write_csr_read_write = ARG_read_write_csr_read_write;
  INST_read_writeReg.METH_write(ARG_read_write_csr_read_write);
}

tUInt8 MOD_testFSM::METH_RDY_read_write_csr()
{
  tUInt8 PORT_RDY_read_write_csr;
  tUInt8 DEF_CAN_FIRE_read_write_csr;
  DEF_CAN_FIRE_read_write_csr = (tUInt8)1u;
  PORT_RDY_read_write_csr = DEF_CAN_FIRE_read_write_csr;
  return PORT_RDY_read_write_csr;
}

void MOD_testFSM::METH_addr_csr(tUInt32 ARG_addr_csr_addr)
{
  PORT_EN_addr_csr = (tUInt8)1u;
  DEF_WILL_FIRE_addr_csr = (tUInt8)1u;
  PORT_addr_csr_addr = ARG_addr_csr_addr;
  INST_addrReg.METH_write(ARG_addr_csr_addr);
}

tUInt8 MOD_testFSM::METH_RDY_addr_csr()
{
  tUInt8 PORT_RDY_addr_csr;
  tUInt8 DEF_CAN_FIRE_addr_csr;
  DEF_CAN_FIRE_addr_csr = (tUInt8)1u;
  PORT_RDY_addr_csr = DEF_CAN_FIRE_addr_csr;
  return PORT_RDY_addr_csr;
}

void MOD_testFSM::METH_addr_valid_byte_csr(tUInt8 ARG_addr_valid_byte_csr_addr_valid_byte)
{
  PORT_EN_addr_valid_byte_csr = (tUInt8)1u;
  DEF_WILL_FIRE_addr_valid_byte_csr = (tUInt8)1u;
  PORT_addr_valid_byte_csr_addr_valid_byte = ARG_addr_valid_byte_csr_addr_valid_byte;
  INST_addr_valid_byteReg.METH_write(ARG_addr_valid_byte_csr_addr_valid_byte);
}

tUInt8 MOD_testFSM::METH_RDY_addr_valid_byte_csr()
{
  tUInt8 PORT_RDY_addr_valid_byte_csr;
  tUInt8 DEF_CAN_FIRE_addr_valid_byte_csr;
  DEF_CAN_FIRE_addr_valid_byte_csr = (tUInt8)1u;
  PORT_RDY_addr_valid_byte_csr = DEF_CAN_FIRE_addr_valid_byte_csr;
  return PORT_RDY_addr_valid_byte_csr;
}

tUInt8 MOD_testFSM::METH_rd_fifo_empty()
{
  tUInt8 PORT_rd_fifo_empty;
  PORT_rd_fifo_empty = INST_rd_fifo_emptyReg.METH_read();
  return PORT_rd_fifo_empty;
}

tUInt8 MOD_testFSM::METH_RDY_rd_fifo_empty()
{
  tUInt8 PORT_RDY_rd_fifo_empty;
  tUInt8 DEF_CAN_FIRE_rd_fifo_empty;
  DEF_CAN_FIRE_rd_fifo_empty = (tUInt8)1u;
  PORT_RDY_rd_fifo_empty = DEF_CAN_FIRE_rd_fifo_empty;
  return PORT_RDY_rd_fifo_empty;
}

tUInt8 MOD_testFSM::METH_rd_fifo_full()
{
  tUInt8 PORT_rd_fifo_full;
  PORT_rd_fifo_full = INST_rd_fifo_fullReg.METH_read();
  return PORT_rd_fifo_full;
}

tUInt8 MOD_testFSM::METH_RDY_rd_fifo_full()
{
  tUInt8 PORT_RDY_rd_fifo_full;
  tUInt8 DEF_CAN_FIRE_rd_fifo_full;
  DEF_CAN_FIRE_rd_fifo_full = (tUInt8)1u;
  PORT_RDY_rd_fifo_full = DEF_CAN_FIRE_rd_fifo_full;
  return PORT_RDY_rd_fifo_full;
}

tUInt8 MOD_testFSM::METH_wr_fifo_empty()
{
  tUInt8 PORT_wr_fifo_empty;
  DEF_wr_fifo_emptyReg__h1408 = INST_wr_fifo_emptyReg.METH_read();
  PORT_wr_fifo_empty = DEF_wr_fifo_emptyReg__h1408;
  return PORT_wr_fifo_empty;
}

tUInt8 MOD_testFSM::METH_RDY_wr_fifo_empty()
{
  tUInt8 PORT_RDY_wr_fifo_empty;
  tUInt8 DEF_CAN_FIRE_wr_fifo_empty;
  DEF_CAN_FIRE_wr_fifo_empty = (tUInt8)1u;
  PORT_RDY_wr_fifo_empty = DEF_CAN_FIRE_wr_fifo_empty;
  return PORT_RDY_wr_fifo_empty;
}

tUInt8 MOD_testFSM::METH_wr_fifo_full()
{
  tUInt8 PORT_wr_fifo_full;
  PORT_wr_fifo_full = INST_wr_fifo_fullReg.METH_read();
  return PORT_wr_fifo_full;
}

tUInt8 MOD_testFSM::METH_RDY_wr_fifo_full()
{
  tUInt8 PORT_RDY_wr_fifo_full;
  tUInt8 DEF_CAN_FIRE_wr_fifo_full;
  DEF_CAN_FIRE_wr_fifo_full = (tUInt8)1u;
  PORT_RDY_wr_fifo_full = DEF_CAN_FIRE_wr_fifo_full;
  return PORT_RDY_wr_fifo_full;
}

tUInt8 MOD_testFSM::METH_rd_overflow()
{
  tUInt8 PORT_rd_overflow;
  PORT_rd_overflow = INST_rd_overflowReg.METH_read();
  return PORT_rd_overflow;
}

tUInt8 MOD_testFSM::METH_RDY_rd_overflow()
{
  tUInt8 PORT_RDY_rd_overflow;
  tUInt8 DEF_CAN_FIRE_rd_overflow;
  DEF_CAN_FIRE_rd_overflow = (tUInt8)1u;
  PORT_RDY_rd_overflow = DEF_CAN_FIRE_rd_overflow;
  return PORT_RDY_rd_overflow;
}

tUInt8 MOD_testFSM::METH_wr_overflow()
{
  tUInt8 PORT_wr_overflow;
  PORT_wr_overflow = INST_wr_overflowReg.METH_read();
  return PORT_wr_overflow;
}

tUInt8 MOD_testFSM::METH_RDY_wr_overflow()
{
  tUInt8 PORT_RDY_wr_overflow;
  tUInt8 DEF_CAN_FIRE_wr_overflow;
  DEF_CAN_FIRE_wr_overflow = (tUInt8)1u;
  PORT_RDY_wr_overflow = DEF_CAN_FIRE_wr_overflow;
  return PORT_RDY_wr_overflow;
}

tUInt8 MOD_testFSM::METH_underflow_error()
{
  tUInt8 PORT_underflow_error;
  PORT_underflow_error = INST_underflow_errorReg.METH_read();
  return PORT_underflow_error;
}

tUInt8 MOD_testFSM::METH_RDY_underflow_error()
{
  tUInt8 PORT_RDY_underflow_error;
  tUInt8 DEF_CAN_FIRE_underflow_error;
  DEF_CAN_FIRE_underflow_error = (tUInt8)1u;
  PORT_RDY_underflow_error = DEF_CAN_FIRE_underflow_error;
  return PORT_RDY_underflow_error;
}

tUInt8 MOD_testFSM::METH_nack_error()
{
  tUInt8 PORT_nack_error;
  PORT_nack_error = INST_nack_errorReg.METH_read();
  return PORT_nack_error;
}

tUInt8 MOD_testFSM::METH_RDY_nack_error()
{
  tUInt8 PORT_RDY_nack_error;
  tUInt8 DEF_CAN_FIRE_nack_error;
  DEF_CAN_FIRE_nack_error = (tUInt8)1u;
  PORT_RDY_nack_error = DEF_CAN_FIRE_nack_error;
  return PORT_RDY_nack_error;
}

tUInt8 MOD_testFSM::METH_bus_error()
{
  tUInt8 PORT_bus_error;
  PORT_bus_error = INST_bus_errorReg.METH_read();
  return PORT_bus_error;
}

tUInt8 MOD_testFSM::METH_RDY_bus_error()
{
  tUInt8 PORT_RDY_bus_error;
  tUInt8 DEF_CAN_FIRE_bus_error;
  DEF_CAN_FIRE_bus_error = (tUInt8)1u;
  PORT_RDY_bus_error = DEF_CAN_FIRE_bus_error;
  return PORT_RDY_bus_error;
}

tUInt8 MOD_testFSM::METH_i2c_busy()
{
  tUInt8 PORT_i2c_busy;
  PORT_i2c_busy = INST_i2c_busyReg.METH_read();
  return PORT_i2c_busy;
}

tUInt8 MOD_testFSM::METH_RDY_i2c_busy()
{
  tUInt8 PORT_RDY_i2c_busy;
  tUInt8 DEF_CAN_FIRE_i2c_busy;
  DEF_CAN_FIRE_i2c_busy = (tUInt8)1u;
  PORT_RDY_i2c_busy = DEF_CAN_FIRE_i2c_busy;
  return PORT_RDY_i2c_busy;
}

tUInt8 MOD_testFSM::METH_sda()
{
  tUInt8 PORT_sda;
  DEF_sdaReg__h1204 = INST_sdaReg.METH_read();
  PORT_sda = DEF_sdaReg__h1204;
  return PORT_sda;
}

tUInt8 MOD_testFSM::METH_RDY_sda()
{
  tUInt8 PORT_RDY_sda;
  tUInt8 DEF_CAN_FIRE_sda;
  DEF_CAN_FIRE_sda = (tUInt8)1u;
  PORT_RDY_sda = DEF_CAN_FIRE_sda;
  return PORT_RDY_sda;
}

tUInt8 MOD_testFSM::METH_scl()
{
  tUInt8 PORT_scl;
  PORT_scl = INST_sclReg.METH_read();
  return PORT_scl;
}

tUInt8 MOD_testFSM::METH_RDY_scl()
{
  tUInt8 PORT_RDY_scl;
  tUInt8 DEF_CAN_FIRE_scl;
  DEF_CAN_FIRE_scl = (tUInt8)1u;
  PORT_RDY_scl = DEF_CAN_FIRE_scl;
  return PORT_RDY_scl;
}

tUInt8 MOD_testFSM::METH_read()
{
  tUInt8 PORT_read;
  DEF_state__h936 = INST_state.METH_read();
  PORT_read = DEF_state__h936;
  return PORT_read;
}

tUInt8 MOD_testFSM::METH_RDY_read()
{
  tUInt8 PORT_RDY_read;
  tUInt8 DEF_CAN_FIRE_read;
  DEF_CAN_FIRE_read = (tUInt8)1u;
  PORT_RDY_read = DEF_CAN_FIRE_read;
  return PORT_RDY_read;
}

void MOD_testFSM::METH_wr_fifo_csr(tUInt8 ARG_wr_fifo_csr_wr_fifo)
{
  tUInt8 DEF_f_in_notFull____d31;
  tUInt8 DEF_f_in_notEmpty____d32;
  tUInt8 DEF_f_out_notFull____d33;
  tUInt8 DEF_f_out_notEmpty____d34;
  PORT_EN_wr_fifo_csr = (tUInt8)1u;
  DEF_WILL_FIRE_wr_fifo_csr = (tUInt8)1u;
  PORT_wr_fifo_csr_wr_fifo = ARG_wr_fifo_csr_wr_fifo;
  DEF_f_out_notEmpty____d34 = INST_f_out.METH_notEmpty();
  DEF_f_out_notFull____d33 = INST_f_out.METH_notFull();
  DEF_f_in_notEmpty____d32 = INST_f_in.METH_notEmpty();
  DEF_f_in_notFull____d31 = INST_f_in.METH_notFull();
  INST_f_in.METH_enq(ARG_wr_fifo_csr_wr_fifo);
  INST_rd_fifo_emptyReg.METH_write(DEF_f_in_notFull____d31);
  INST_rd_fifo_fullReg.METH_write(DEF_f_in_notEmpty____d32);
  INST_wr_fifo_emptyReg.METH_write(DEF_f_out_notFull____d33);
  INST_wr_fifo_fullReg.METH_write(DEF_f_out_notEmpty____d34);
}

tUInt8 MOD_testFSM::METH_RDY_wr_fifo_csr()
{
  tUInt8 PORT_RDY_wr_fifo_csr;
  tUInt8 DEF_CAN_FIRE_wr_fifo_csr;
  DEF_CAN_FIRE_wr_fifo_csr = INST_f_in.METH_i_notFull();
  PORT_RDY_wr_fifo_csr = DEF_CAN_FIRE_wr_fifo_csr;
  return PORT_RDY_wr_fifo_csr;
}

tUInt8 MOD_testFSM::METH_rd_fifo()
{
  tUInt8 DEF_rd_fifo__avValue1;
  tUInt8 PORT_rd_fifo;
  PORT_EN_rd_fifo = (tUInt8)1u;
  DEF_WILL_FIRE_rd_fifo = (tUInt8)1u;
  DEF_rd_fifo__avValue1 = INST_f_out.METH_first();
  PORT_rd_fifo = DEF_rd_fifo__avValue1;
  INST_f_out.METH_deq();
  return PORT_rd_fifo;
}

tUInt8 MOD_testFSM::METH_RDY_rd_fifo()
{
  tUInt8 PORT_RDY_rd_fifo;
  tUInt8 DEF_CAN_FIRE_rd_fifo;
  DEF_CAN_FIRE_rd_fifo = INST_f_out.METH_i_notEmpty();
  PORT_RDY_rd_fifo = DEF_CAN_FIRE_rd_fifo;
  return PORT_RDY_rd_fifo;
}

void MOD_testFSM::METH_reset(tUInt8 ARG_reset_value)
{
  PORT_EN_reset = (tUInt8)1u;
  DEF_WILL_FIRE_reset = (tUInt8)1u;
  PORT_reset_value = ARG_reset_value;
  if (ARG_reset_value)
    INST_sclReg.METH_write((tUInt8)0u);
}

tUInt8 MOD_testFSM::METH_RDY_reset()
{
  tUInt8 PORT_RDY_reset;
  tUInt8 DEF_CAN_FIRE_reset;
  DEF_CAN_FIRE_reset = (tUInt8)1u;
  PORT_RDY_reset = DEF_CAN_FIRE_reset;
  return PORT_RDY_reset;
}

void MOD_testFSM::METH_outClock(tUInt8 ARG_outClock_value)
{
  PORT_EN_outClock = (tUInt8)1u;
  DEF_WILL_FIRE_outClock = (tUInt8)1u;
  PORT_outClock_value = ARG_outClock_value;
  INST_sclReg.METH_write(ARG_outClock_value);
}

tUInt8 MOD_testFSM::METH_RDY_outClock()
{
  tUInt8 PORT_RDY_outClock;
  tUInt8 DEF_CAN_FIRE_outClock;
  DEF_CAN_FIRE_outClock = (tUInt8)1u;
  PORT_RDY_outClock = DEF_CAN_FIRE_outClock;
  return PORT_RDY_outClock;
}


/* Reset routines */

void MOD_testFSM::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_wr_overflowReg.reset_RST(ARG_rst_in);
  INST_wr_fifo_fullReg.reset_RST(ARG_rst_in);
  INST_wr_fifo_emptyReg.reset_RST(ARG_rst_in);
  INST_underflow_errorReg.reset_RST(ARG_rst_in);
  INST_state.reset_RST(ARG_rst_in);
  INST_startReg.reset_RST(ARG_rst_in);
  INST_slvaddrReg.reset_RST(ARG_rst_in);
  INST_sdaReg.reset_RST(ARG_rst_in);
  INST_sclReg.reset_RST(ARG_rst_in);
  INST_read_writeReg.reset_RST(ARG_rst_in);
  INST_rd_overflowReg.reset_RST(ARG_rst_in);
  INST_rd_fifo_fullReg.reset_RST(ARG_rst_in);
  INST_rd_fifo_emptyReg.reset_RST(ARG_rst_in);
  INST_nack_errorReg.reset_RST(ARG_rst_in);
  INST_i2c_busyReg.reset_RST(ARG_rst_in);
  INST_f_out.reset_RST(ARG_rst_in);
  INST_f_in.reset_RST(ARG_rst_in);
  INST_counter.reset_RST(ARG_rst_in);
  INST_bus_errorReg.reset_RST(ARG_rst_in);
  INST_addr_valid_byteReg.reset_RST(ARG_rst_in);
  INST_addr_lenReg.reset_RST(ARG_rst_in);
  INST_addrReg.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_testFSM::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_testFSM::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_addrReg.dump_state(indent + 2u);
  INST_addr_lenReg.dump_state(indent + 2u);
  INST_addr_valid_byteReg.dump_state(indent + 2u);
  INST_bus_errorReg.dump_state(indent + 2u);
  INST_counter.dump_state(indent + 2u);
  INST_f_in.dump_state(indent + 2u);
  INST_f_out.dump_state(indent + 2u);
  INST_i2c_busyReg.dump_state(indent + 2u);
  INST_nack_errorReg.dump_state(indent + 2u);
  INST_rd_fifo_emptyReg.dump_state(indent + 2u);
  INST_rd_fifo_fullReg.dump_state(indent + 2u);
  INST_rd_overflowReg.dump_state(indent + 2u);
  INST_read_writeReg.dump_state(indent + 2u);
  INST_sclReg.dump_state(indent + 2u);
  INST_sdaReg.dump_state(indent + 2u);
  INST_slvaddrReg.dump_state(indent + 2u);
  INST_startReg.dump_state(indent + 2u);
  INST_state.dump_state(indent + 2u);
  INST_underflow_errorReg.dump_state(indent + 2u);
  INST_wr_fifo_emptyReg.dump_state(indent + 2u);
  INST_wr_fifo_fullReg.dump_state(indent + 2u);
  INST_wr_overflowReg.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_testFSM::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 57u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_addr_csr", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_addr_len_csr", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_addr_valid_byte_csr", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_outClock", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_rd_fifo", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_read_write_csr", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_reset", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_slvaddr_csr", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_start_csr", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_wr_fifo_csr", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h864", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "sdaReg__h1204", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "signed_counter___d9", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "state__h936", 4u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "wr_fifo_emptyReg__h1408", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_addr_csr", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_addr_len_csr", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_addr_valid_byte_csr", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_outClock", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_rd_fifo", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_read_write_csr", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_reset", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_slvaddr_csr", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_start_csr", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_wr_fifo_csr", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "addr_csr_addr", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "addr_len_csr_addr_len", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "addr_valid_byte_csr_addr_valid_byte", 2u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "outClock_value", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "read_write_csr_read_write", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "reset_value", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "slvaddr_csr_slvaddr", 10u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "start_csr_start", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "wr_fifo_csr_wr_fifo", 8u);
  num = INST_addrReg.dump_VCD_defs(num);
  num = INST_addr_lenReg.dump_VCD_defs(num);
  num = INST_addr_valid_byteReg.dump_VCD_defs(num);
  num = INST_bus_errorReg.dump_VCD_defs(num);
  num = INST_counter.dump_VCD_defs(num);
  num = INST_f_in.dump_VCD_defs(num);
  num = INST_f_out.dump_VCD_defs(num);
  num = INST_i2c_busyReg.dump_VCD_defs(num);
  num = INST_nack_errorReg.dump_VCD_defs(num);
  num = INST_rd_fifo_emptyReg.dump_VCD_defs(num);
  num = INST_rd_fifo_fullReg.dump_VCD_defs(num);
  num = INST_rd_overflowReg.dump_VCD_defs(num);
  num = INST_read_writeReg.dump_VCD_defs(num);
  num = INST_sclReg.dump_VCD_defs(num);
  num = INST_sdaReg.dump_VCD_defs(num);
  num = INST_slvaddrReg.dump_VCD_defs(num);
  num = INST_startReg.dump_VCD_defs(num);
  num = INST_state.dump_VCD_defs(num);
  num = INST_underflow_errorReg.dump_VCD_defs(num);
  num = INST_wr_fifo_emptyReg.dump_VCD_defs(num);
  num = INST_wr_fifo_fullReg.dump_VCD_defs(num);
  num = INST_wr_overflowReg.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_testFSM::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_testFSM &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_testFSM::vcd_defs(tVCDDumpType dt, MOD_testFSM &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 4u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 2u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 10u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 8u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_addr_csr) != DEF_WILL_FIRE_addr_csr)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_addr_csr, 1u);
	backing.DEF_WILL_FIRE_addr_csr = DEF_WILL_FIRE_addr_csr;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_addr_len_csr) != DEF_WILL_FIRE_addr_len_csr)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_addr_len_csr, 1u);
	backing.DEF_WILL_FIRE_addr_len_csr = DEF_WILL_FIRE_addr_len_csr;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_addr_valid_byte_csr) != DEF_WILL_FIRE_addr_valid_byte_csr)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_addr_valid_byte_csr, 1u);
	backing.DEF_WILL_FIRE_addr_valid_byte_csr = DEF_WILL_FIRE_addr_valid_byte_csr;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_outClock) != DEF_WILL_FIRE_outClock)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_outClock, 1u);
	backing.DEF_WILL_FIRE_outClock = DEF_WILL_FIRE_outClock;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_rd_fifo) != DEF_WILL_FIRE_rd_fifo)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_rd_fifo, 1u);
	backing.DEF_WILL_FIRE_rd_fifo = DEF_WILL_FIRE_rd_fifo;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_read_write_csr) != DEF_WILL_FIRE_read_write_csr)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_read_write_csr, 1u);
	backing.DEF_WILL_FIRE_read_write_csr = DEF_WILL_FIRE_read_write_csr;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_reset) != DEF_WILL_FIRE_reset)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_reset, 1u);
	backing.DEF_WILL_FIRE_reset = DEF_WILL_FIRE_reset;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_slvaddr_csr) != DEF_WILL_FIRE_slvaddr_csr)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_slvaddr_csr, 1u);
	backing.DEF_WILL_FIRE_slvaddr_csr = DEF_WILL_FIRE_slvaddr_csr;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_start_csr) != DEF_WILL_FIRE_start_csr)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_start_csr, 1u);
	backing.DEF_WILL_FIRE_start_csr = DEF_WILL_FIRE_start_csr;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_wr_fifo_csr) != DEF_WILL_FIRE_wr_fifo_csr)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_wr_fifo_csr, 1u);
	backing.DEF_WILL_FIRE_wr_fifo_csr = DEF_WILL_FIRE_wr_fifo_csr;
      }
      ++num;
      if ((backing.DEF_b__h864) != DEF_b__h864)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h864, 32u);
	backing.DEF_b__h864 = DEF_b__h864;
      }
      ++num;
      if ((backing.DEF_sdaReg__h1204) != DEF_sdaReg__h1204)
      {
	vcd_write_val(sim_hdl, num, DEF_sdaReg__h1204, 1u);
	backing.DEF_sdaReg__h1204 = DEF_sdaReg__h1204;
      }
      ++num;
      if ((backing.DEF_signed_counter___d9) != DEF_signed_counter___d9)
      {
	vcd_write_val(sim_hdl, num, DEF_signed_counter___d9, 32u);
	backing.DEF_signed_counter___d9 = DEF_signed_counter___d9;
      }
      ++num;
      if ((backing.DEF_state__h936) != DEF_state__h936)
      {
	vcd_write_val(sim_hdl, num, DEF_state__h936, 4u);
	backing.DEF_state__h936 = DEF_state__h936;
      }
      ++num;
      if ((backing.DEF_wr_fifo_emptyReg__h1408) != DEF_wr_fifo_emptyReg__h1408)
      {
	vcd_write_val(sim_hdl, num, DEF_wr_fifo_emptyReg__h1408, 1u);
	backing.DEF_wr_fifo_emptyReg__h1408 = DEF_wr_fifo_emptyReg__h1408;
      }
      ++num;
      if ((backing.PORT_EN_addr_csr) != PORT_EN_addr_csr)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_addr_csr, 1u);
	backing.PORT_EN_addr_csr = PORT_EN_addr_csr;
      }
      ++num;
      if ((backing.PORT_EN_addr_len_csr) != PORT_EN_addr_len_csr)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_addr_len_csr, 1u);
	backing.PORT_EN_addr_len_csr = PORT_EN_addr_len_csr;
      }
      ++num;
      if ((backing.PORT_EN_addr_valid_byte_csr) != PORT_EN_addr_valid_byte_csr)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_addr_valid_byte_csr, 1u);
	backing.PORT_EN_addr_valid_byte_csr = PORT_EN_addr_valid_byte_csr;
      }
      ++num;
      if ((backing.PORT_EN_outClock) != PORT_EN_outClock)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_outClock, 1u);
	backing.PORT_EN_outClock = PORT_EN_outClock;
      }
      ++num;
      if ((backing.PORT_EN_rd_fifo) != PORT_EN_rd_fifo)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_rd_fifo, 1u);
	backing.PORT_EN_rd_fifo = PORT_EN_rd_fifo;
      }
      ++num;
      if ((backing.PORT_EN_read_write_csr) != PORT_EN_read_write_csr)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_read_write_csr, 1u);
	backing.PORT_EN_read_write_csr = PORT_EN_read_write_csr;
      }
      ++num;
      if ((backing.PORT_EN_reset) != PORT_EN_reset)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_reset, 1u);
	backing.PORT_EN_reset = PORT_EN_reset;
      }
      ++num;
      if ((backing.PORT_EN_slvaddr_csr) != PORT_EN_slvaddr_csr)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_slvaddr_csr, 1u);
	backing.PORT_EN_slvaddr_csr = PORT_EN_slvaddr_csr;
      }
      ++num;
      if ((backing.PORT_EN_start_csr) != PORT_EN_start_csr)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_start_csr, 1u);
	backing.PORT_EN_start_csr = PORT_EN_start_csr;
      }
      ++num;
      if ((backing.PORT_EN_wr_fifo_csr) != PORT_EN_wr_fifo_csr)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_wr_fifo_csr, 1u);
	backing.PORT_EN_wr_fifo_csr = PORT_EN_wr_fifo_csr;
      }
      ++num;
      if ((backing.PORT_addr_csr_addr) != PORT_addr_csr_addr)
      {
	vcd_write_val(sim_hdl, num, PORT_addr_csr_addr, 32u);
	backing.PORT_addr_csr_addr = PORT_addr_csr_addr;
      }
      ++num;
      if ((backing.PORT_addr_len_csr_addr_len) != PORT_addr_len_csr_addr_len)
      {
	vcd_write_val(sim_hdl, num, PORT_addr_len_csr_addr_len, 1u);
	backing.PORT_addr_len_csr_addr_len = PORT_addr_len_csr_addr_len;
      }
      ++num;
      if ((backing.PORT_addr_valid_byte_csr_addr_valid_byte) != PORT_addr_valid_byte_csr_addr_valid_byte)
      {
	vcd_write_val(sim_hdl, num, PORT_addr_valid_byte_csr_addr_valid_byte, 2u);
	backing.PORT_addr_valid_byte_csr_addr_valid_byte = PORT_addr_valid_byte_csr_addr_valid_byte;
      }
      ++num;
      if ((backing.PORT_outClock_value) != PORT_outClock_value)
      {
	vcd_write_val(sim_hdl, num, PORT_outClock_value, 1u);
	backing.PORT_outClock_value = PORT_outClock_value;
      }
      ++num;
      if ((backing.PORT_read_write_csr_read_write) != PORT_read_write_csr_read_write)
      {
	vcd_write_val(sim_hdl, num, PORT_read_write_csr_read_write, 1u);
	backing.PORT_read_write_csr_read_write = PORT_read_write_csr_read_write;
      }
      ++num;
      if ((backing.PORT_reset_value) != PORT_reset_value)
      {
	vcd_write_val(sim_hdl, num, PORT_reset_value, 1u);
	backing.PORT_reset_value = PORT_reset_value;
      }
      ++num;
      if ((backing.PORT_slvaddr_csr_slvaddr) != PORT_slvaddr_csr_slvaddr)
      {
	vcd_write_val(sim_hdl, num, PORT_slvaddr_csr_slvaddr, 10u);
	backing.PORT_slvaddr_csr_slvaddr = PORT_slvaddr_csr_slvaddr;
      }
      ++num;
      if ((backing.PORT_start_csr_start) != PORT_start_csr_start)
      {
	vcd_write_val(sim_hdl, num, PORT_start_csr_start, 1u);
	backing.PORT_start_csr_start = PORT_start_csr_start;
      }
      ++num;
      if ((backing.PORT_wr_fifo_csr_wr_fifo) != PORT_wr_fifo_csr_wr_fifo)
      {
	vcd_write_val(sim_hdl, num, PORT_wr_fifo_csr_wr_fifo, 8u);
	backing.PORT_wr_fifo_csr_wr_fifo = PORT_wr_fifo_csr_wr_fifo;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_addr_csr, 1u);
      backing.DEF_WILL_FIRE_addr_csr = DEF_WILL_FIRE_addr_csr;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_addr_len_csr, 1u);
      backing.DEF_WILL_FIRE_addr_len_csr = DEF_WILL_FIRE_addr_len_csr;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_addr_valid_byte_csr, 1u);
      backing.DEF_WILL_FIRE_addr_valid_byte_csr = DEF_WILL_FIRE_addr_valid_byte_csr;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_outClock, 1u);
      backing.DEF_WILL_FIRE_outClock = DEF_WILL_FIRE_outClock;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_rd_fifo, 1u);
      backing.DEF_WILL_FIRE_rd_fifo = DEF_WILL_FIRE_rd_fifo;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_read_write_csr, 1u);
      backing.DEF_WILL_FIRE_read_write_csr = DEF_WILL_FIRE_read_write_csr;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_reset, 1u);
      backing.DEF_WILL_FIRE_reset = DEF_WILL_FIRE_reset;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_slvaddr_csr, 1u);
      backing.DEF_WILL_FIRE_slvaddr_csr = DEF_WILL_FIRE_slvaddr_csr;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_start_csr, 1u);
      backing.DEF_WILL_FIRE_start_csr = DEF_WILL_FIRE_start_csr;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_wr_fifo_csr, 1u);
      backing.DEF_WILL_FIRE_wr_fifo_csr = DEF_WILL_FIRE_wr_fifo_csr;
      vcd_write_val(sim_hdl, num++, DEF_b__h864, 32u);
      backing.DEF_b__h864 = DEF_b__h864;
      vcd_write_val(sim_hdl, num++, DEF_sdaReg__h1204, 1u);
      backing.DEF_sdaReg__h1204 = DEF_sdaReg__h1204;
      vcd_write_val(sim_hdl, num++, DEF_signed_counter___d9, 32u);
      backing.DEF_signed_counter___d9 = DEF_signed_counter___d9;
      vcd_write_val(sim_hdl, num++, DEF_state__h936, 4u);
      backing.DEF_state__h936 = DEF_state__h936;
      vcd_write_val(sim_hdl, num++, DEF_wr_fifo_emptyReg__h1408, 1u);
      backing.DEF_wr_fifo_emptyReg__h1408 = DEF_wr_fifo_emptyReg__h1408;
      vcd_write_val(sim_hdl, num++, PORT_EN_addr_csr, 1u);
      backing.PORT_EN_addr_csr = PORT_EN_addr_csr;
      vcd_write_val(sim_hdl, num++, PORT_EN_addr_len_csr, 1u);
      backing.PORT_EN_addr_len_csr = PORT_EN_addr_len_csr;
      vcd_write_val(sim_hdl, num++, PORT_EN_addr_valid_byte_csr, 1u);
      backing.PORT_EN_addr_valid_byte_csr = PORT_EN_addr_valid_byte_csr;
      vcd_write_val(sim_hdl, num++, PORT_EN_outClock, 1u);
      backing.PORT_EN_outClock = PORT_EN_outClock;
      vcd_write_val(sim_hdl, num++, PORT_EN_rd_fifo, 1u);
      backing.PORT_EN_rd_fifo = PORT_EN_rd_fifo;
      vcd_write_val(sim_hdl, num++, PORT_EN_read_write_csr, 1u);
      backing.PORT_EN_read_write_csr = PORT_EN_read_write_csr;
      vcd_write_val(sim_hdl, num++, PORT_EN_reset, 1u);
      backing.PORT_EN_reset = PORT_EN_reset;
      vcd_write_val(sim_hdl, num++, PORT_EN_slvaddr_csr, 1u);
      backing.PORT_EN_slvaddr_csr = PORT_EN_slvaddr_csr;
      vcd_write_val(sim_hdl, num++, PORT_EN_start_csr, 1u);
      backing.PORT_EN_start_csr = PORT_EN_start_csr;
      vcd_write_val(sim_hdl, num++, PORT_EN_wr_fifo_csr, 1u);
      backing.PORT_EN_wr_fifo_csr = PORT_EN_wr_fifo_csr;
      vcd_write_val(sim_hdl, num++, PORT_addr_csr_addr, 32u);
      backing.PORT_addr_csr_addr = PORT_addr_csr_addr;
      vcd_write_val(sim_hdl, num++, PORT_addr_len_csr_addr_len, 1u);
      backing.PORT_addr_len_csr_addr_len = PORT_addr_len_csr_addr_len;
      vcd_write_val(sim_hdl, num++, PORT_addr_valid_byte_csr_addr_valid_byte, 2u);
      backing.PORT_addr_valid_byte_csr_addr_valid_byte = PORT_addr_valid_byte_csr_addr_valid_byte;
      vcd_write_val(sim_hdl, num++, PORT_outClock_value, 1u);
      backing.PORT_outClock_value = PORT_outClock_value;
      vcd_write_val(sim_hdl, num++, PORT_read_write_csr_read_write, 1u);
      backing.PORT_read_write_csr_read_write = PORT_read_write_csr_read_write;
      vcd_write_val(sim_hdl, num++, PORT_reset_value, 1u);
      backing.PORT_reset_value = PORT_reset_value;
      vcd_write_val(sim_hdl, num++, PORT_slvaddr_csr_slvaddr, 10u);
      backing.PORT_slvaddr_csr_slvaddr = PORT_slvaddr_csr_slvaddr;
      vcd_write_val(sim_hdl, num++, PORT_start_csr_start, 1u);
      backing.PORT_start_csr_start = PORT_start_csr_start;
      vcd_write_val(sim_hdl, num++, PORT_wr_fifo_csr_wr_fifo, 8u);
      backing.PORT_wr_fifo_csr_wr_fifo = PORT_wr_fifo_csr_wr_fifo;
    }
}

void MOD_testFSM::vcd_prims(tVCDDumpType dt, MOD_testFSM &backing)
{
  INST_addrReg.dump_VCD(dt, backing.INST_addrReg);
  INST_addr_lenReg.dump_VCD(dt, backing.INST_addr_lenReg);
  INST_addr_valid_byteReg.dump_VCD(dt, backing.INST_addr_valid_byteReg);
  INST_bus_errorReg.dump_VCD(dt, backing.INST_bus_errorReg);
  INST_counter.dump_VCD(dt, backing.INST_counter);
  INST_f_in.dump_VCD(dt, backing.INST_f_in);
  INST_f_out.dump_VCD(dt, backing.INST_f_out);
  INST_i2c_busyReg.dump_VCD(dt, backing.INST_i2c_busyReg);
  INST_nack_errorReg.dump_VCD(dt, backing.INST_nack_errorReg);
  INST_rd_fifo_emptyReg.dump_VCD(dt, backing.INST_rd_fifo_emptyReg);
  INST_rd_fifo_fullReg.dump_VCD(dt, backing.INST_rd_fifo_fullReg);
  INST_rd_overflowReg.dump_VCD(dt, backing.INST_rd_overflowReg);
  INST_read_writeReg.dump_VCD(dt, backing.INST_read_writeReg);
  INST_sclReg.dump_VCD(dt, backing.INST_sclReg);
  INST_sdaReg.dump_VCD(dt, backing.INST_sdaReg);
  INST_slvaddrReg.dump_VCD(dt, backing.INST_slvaddrReg);
  INST_startReg.dump_VCD(dt, backing.INST_startReg);
  INST_state.dump_VCD(dt, backing.INST_state);
  INST_underflow_errorReg.dump_VCD(dt, backing.INST_underflow_errorReg);
  INST_wr_fifo_emptyReg.dump_VCD(dt, backing.INST_wr_fifo_emptyReg);
  INST_wr_fifo_fullReg.dump_VCD(dt, backing.INST_wr_fifo_fullReg);
  INST_wr_overflowReg.dump_VCD(dt, backing.INST_wr_overflowReg);
}
