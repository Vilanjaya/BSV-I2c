/*
 * Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
 * 
 * On Tue May  7 18:00:11 +0530 2024
 * 
 */

/* Generation options: */
#ifndef __testFSM_h__
#define __testFSM_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the testFSM module */
class MOD_testFSM : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Reg<tUInt32> INST_addrReg;
  MOD_Reg<tUInt8> INST_addr_lenReg;
  MOD_Reg<tUInt8> INST_addr_valid_byteReg;
  MOD_Reg<tUInt8> INST_bus_errorReg;
  MOD_Reg<tUInt32> INST_counter;
  MOD_Fifo<tUInt8> INST_f_in;
  MOD_Fifo<tUInt8> INST_f_out;
  MOD_Reg<tUInt8> INST_i2c_busyReg;
  MOD_Reg<tUInt8> INST_nack_errorReg;
  MOD_Reg<tUInt8> INST_rd_fifo_emptyReg;
  MOD_Reg<tUInt8> INST_rd_fifo_fullReg;
  MOD_Reg<tUInt8> INST_rd_overflowReg;
  MOD_Reg<tUInt8> INST_read_writeReg;
  MOD_Reg<tUInt8> INST_sclReg;
  MOD_Reg<tUInt8> INST_sdaReg;
  MOD_Reg<tUInt32> INST_slvaddrReg;
  MOD_Reg<tUInt8> INST_startReg;
  MOD_Reg<tUInt8> INST_state;
  MOD_Reg<tUInt8> INST_underflow_errorReg;
  MOD_Reg<tUInt8> INST_wr_fifo_emptyReg;
  MOD_Reg<tUInt8> INST_wr_fifo_fullReg;
  MOD_Reg<tUInt8> INST_wr_overflowReg;
 
 /* Constructor */
 public:
  MOD_testFSM(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
  tUInt8 PORT_EN_outClock;
  tUInt8 PORT_EN_reset;
  tUInt8 PORT_EN_rd_fifo;
  tUInt8 PORT_EN_wr_fifo_csr;
  tUInt8 PORT_EN_addr_valid_byte_csr;
  tUInt8 PORT_EN_addr_csr;
  tUInt8 PORT_EN_read_write_csr;
  tUInt8 PORT_EN_addr_len_csr;
  tUInt8 PORT_EN_slvaddr_csr;
  tUInt8 PORT_EN_start_csr;
  tUInt8 PORT_outClock_value;
  tUInt8 PORT_reset_value;
  tUInt8 PORT_wr_fifo_csr_wr_fifo;
  tUInt8 PORT_addr_valid_byte_csr_addr_valid_byte;
  tUInt32 PORT_addr_csr_addr;
  tUInt8 PORT_read_write_csr_read_write;
  tUInt8 PORT_addr_len_csr_addr_len;
  tUInt32 PORT_slvaddr_csr_slvaddr;
  tUInt8 PORT_start_csr_start;
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_WILL_FIRE_outClock;
  tUInt8 DEF_WILL_FIRE_reset;
  tUInt8 DEF_WILL_FIRE_rd_fifo;
  tUInt8 DEF_WILL_FIRE_wr_fifo_csr;
  tUInt8 DEF_WILL_FIRE_addr_valid_byte_csr;
  tUInt8 DEF_WILL_FIRE_addr_csr;
  tUInt8 DEF_WILL_FIRE_read_write_csr;
  tUInt8 DEF_WILL_FIRE_addr_len_csr;
  tUInt8 DEF_WILL_FIRE_slvaddr_csr;
  tUInt8 DEF_WILL_FIRE_start_csr;
  tUInt8 DEF_state__h936;
 
 /* Local definitions */
 private:
  tUInt32 DEF_signed_counter___d9;
  tUInt32 DEF_b__h864;
  tUInt8 DEF_sdaReg__h1204;
  tUInt8 DEF_wr_fifo_emptyReg__h1408;
 
 /* Rules */
 public:
  void RL_runCounter();
  void RL_stateIdle();
  void RL_stateStep1();
  void RL_stateStep2();
  void RL_stateStep3();
  void RL_stateStep4();
  void RL_stateStep5();
  void RL_stateStep6();
  void RL_stateStep7();
  void RL_stateStep8();
  void RL_stateStep9();
  void RL_stateStep10();
  void RL_stateStep11();
  void RL_stateStep12();
  void RL_stateStep13();
  void RL_stateSTOP();
 
 /* Methods */
 public:
  void METH_start_csr(tUInt8 ARG_start_csr_start);
  tUInt8 METH_RDY_start_csr();
  void METH_slvaddr_csr(tUInt32 ARG_slvaddr_csr_slvaddr);
  tUInt8 METH_RDY_slvaddr_csr();
  void METH_addr_len_csr(tUInt8 ARG_addr_len_csr_addr_len);
  tUInt8 METH_RDY_addr_len_csr();
  void METH_read_write_csr(tUInt8 ARG_read_write_csr_read_write);
  tUInt8 METH_RDY_read_write_csr();
  void METH_addr_csr(tUInt32 ARG_addr_csr_addr);
  tUInt8 METH_RDY_addr_csr();
  void METH_addr_valid_byte_csr(tUInt8 ARG_addr_valid_byte_csr_addr_valid_byte);
  tUInt8 METH_RDY_addr_valid_byte_csr();
  tUInt8 METH_rd_fifo_empty();
  tUInt8 METH_RDY_rd_fifo_empty();
  tUInt8 METH_rd_fifo_full();
  tUInt8 METH_RDY_rd_fifo_full();
  tUInt8 METH_wr_fifo_empty();
  tUInt8 METH_RDY_wr_fifo_empty();
  tUInt8 METH_wr_fifo_full();
  tUInt8 METH_RDY_wr_fifo_full();
  tUInt8 METH_rd_overflow();
  tUInt8 METH_RDY_rd_overflow();
  tUInt8 METH_wr_overflow();
  tUInt8 METH_RDY_wr_overflow();
  tUInt8 METH_underflow_error();
  tUInt8 METH_RDY_underflow_error();
  tUInt8 METH_nack_error();
  tUInt8 METH_RDY_nack_error();
  tUInt8 METH_bus_error();
  tUInt8 METH_RDY_bus_error();
  tUInt8 METH_i2c_busy();
  tUInt8 METH_RDY_i2c_busy();
  tUInt8 METH_sda();
  tUInt8 METH_RDY_sda();
  tUInt8 METH_scl();
  tUInt8 METH_RDY_scl();
  tUInt8 METH_read();
  tUInt8 METH_RDY_read();
  void METH_wr_fifo_csr(tUInt8 ARG_wr_fifo_csr_wr_fifo);
  tUInt8 METH_RDY_wr_fifo_csr();
  tUInt8 METH_rd_fifo();
  tUInt8 METH_RDY_rd_fifo();
  void METH_reset(tUInt8 ARG_reset_value);
  tUInt8 METH_RDY_reset();
  void METH_outClock(tUInt8 ARG_outClock_value);
  tUInt8 METH_RDY_outClock();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_testFSM &backing);
  void vcd_defs(tVCDDumpType dt, MOD_testFSM &backing);
  void vcd_prims(tVCDDumpType dt, MOD_testFSM &backing);
};

#endif /* ifndef __testFSM_h__ */
